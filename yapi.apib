FORMAT: 1A
HOST: http://api.yalochat.com/

# Yalo Query Base yAPI

yAPI is query oriented API that allows Ayalo client applications to access the core business on behalf of users to perform a variety of complex queries over stores, locations and products and other resource.

To familiarize with yAPI, you can browse through all this detail documentation.

This document was build ussing a cookbook style and will guide you through the most common and simple query tasks to yAPI expert.
It's designed to start from the basics and slowly increase sophisticated concepts until you know everything there is to know about querying over yAPI.

These guides are written in Markdown and are available on our [github repo](https://github.com/yalochat/doc-yapi). If there is something missing, or you find a typo or mistake, please help us by filling an issue or submitting a pull request. Thanks!

# Overview

yAPI is designed and optimized for queries over a just few core business objects or resources.

Through yAPI it's possible to access Yalo locations, stores, products, categories and others.
The API is based in the idea that each resource or collection is stored in a specific path where it's possible to do filtering and search.


# Authentication and Authorization

yAPI uses OAuth2 to allow authenticated access to private resources and business objects.

OAuth2 is a protocol that lets external apps request authorization to private details in a Yalo userâ€™s account without getting their password. This is preferred over Basic Authentication because tokens can be limited to specific types of data, and can be revoked by users at any time.

All Yalo internal and external applications need to register their application before getting started. A registered OAuth application is assigned a unique Client ID and Client Secret. The Client Secret should not be shared.

## Terms to know

### Client (application)
It can be an app running on a mobile device or a web app. The app makes requests to the resource server for protected assets on behalf of the resource owner. The resource owner must give the app permission to access the protected resources.

### Resource owner
Also called an "end user". This is generally the person (or other entity) who is capable of granting access to a protected resource. For example, if an app needs to use chat messages or email address, then you are the resource owner and the only person who can grant the app access to your data.

### Resource server
The resource server is the yAPI platform who stores and manage user and business resources. The yAPI platform need to perform authorization steps before it will serve up protected resources to and application client.

### Authorization server
Yalo authorization server is implemented in compliance with the OAuth 2.0 specification, and it is responsible for validating authorization grants and issuing the access tokens that give the app access to the user's data on yAPI.

### Authorization grant
Gives the app permission to retrieve an access token on behalf of the end user. OAuth 2.0 defines four specific "grant types".

### Access token
A long string of characters that serves as a credential used to access protected resources.

### Protected resource
Data owned by the resource owner. For example, the user's contact list, account information, or other sensitive data.

## Anonymous request
 yAPI supports anonymous request to some of the resources, for example you may list the countries available.

## Scopes
Scopes limit access for OAuth tokens providing a way to limit the amount of access that is granted to an access token.For example, an access token issued to a client app may be granted READ and WRITE access to protected resource as chat conversations or user profile data, or just READ. Scopes do not grant any additional permission beyond that which the user already has.


## Yalo OAuth protocol flows

### Resource owner grant type
The resource owner password grant type is used in our trusted internal applications.  In this configuration, the user provides his resource server credentials (username/password) to the client app, which sends them in the request, the server validates the credentials, and if they are valid, proceeds to generate an access token and returns it.

## Client credentials grant type

## Requirements to authenticate on Yalo platform
To authenticate through the OAuth2 server you need to provide:

1. Application client credentials that consist of a valid `clientId` and `clientSecret`.
2. Resource owner user credentials.
3. At least one scope to specify the type of access that are been requested.

## Signin a user through token generation [POST /oauth/token]
To signin a user you must generate a token that must be used in all the requests to the platform. This endpoint also has the ability of generating a chat session token if a `nonce` is provided or if a `chatSessionToken: true` paramed is added to the body.
To signup new a user you can use the same endpoint for user signing. The only difference will be the response code `201` recieved.

+ Parameters

     + Authorization: `Basic dG90bzplZHdhc2Fh` (String, optional) - Basic64 encode client credentials to be provided in the request header
     + username: `fabia@gmail.com` (String, required) - An email that represents the user to signin
     + password: `123` (String, required) - The user password
     + grantType: `password` (String, required) - The grant to be executed
     + nonce: `e7fzVtooU7U7Bx4HMliusVZVJj6VDkJaxrRi0yMN1mpcsmJCdDTtKUvBI02_0n_eahk9t9HIqLQ_ShLZ3IIBAQ` (String, optional) - Provide a nonce to also generate a chat session token.
     + chatToken: `true` (String, optional) - Provide this param if a nonce is not include and you want to get a chat session token.
     + Default: `false`

+ Request Signin a user (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "username": "fabia@gmail.com",
                "password":"1234",
                "grantType":"password"
            }

+ Response 200 (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "statusCode": 201,
                "user": {
                    "email": "fabia@yalochat.comm"
                },
                "type": "bearer",
                "token": "c3d1973e5ca12eb80d5132283ebd850ede34ae17",
                "expiresIn": 3600,
                "refreshToken": "da0fc43d172ed901466dc783a75697e39bd7302f"
            }

+ Request Sign in a user with nonce an request a chat identity token (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "username": "fabia@gmail.com",
                "password":"1234",
                "grantType":"password",
                "nonce":"e7fzVtooU7U7Bx4HMliusVZVJj6VDkJaxrRi0yMN1mpcsmJCdDTtKUvBI02_0n_eahk9t9HIqLQ_ShLZ3IIBAQ"
            }

+ Response 200 (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "statusCode": 200,
                "user": {
                    "email": "fred@yalochat.com"
                },
                "type": "bearer",
                "token": "56f5ba105c3bc1cd132f91daee538011a2ccd6cb",
                "expiresIn": 3600,
                "chat": {
                    "identityToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImN0eSI6ImxheWVyLWVpdDt2PTEiLCJraWQiOiJsYXllcjovLy9rZXlzL2ZhNjk3M2ZlLTY5NjUtMTFlNS1hODc3LWNlMjQwMjAwNTEyYSJ9.eyJpc3MiOiJsYXllcjovLy9wcm92aWRlcnMvYmVjODhmM2EtNjI2NS0xMWU1LWJjN2UtMGVkZmZlMDA3ODhmIiwicHJuIjoiZnJlZEBheWFsby5jbyIsImlhdCI6MTQ0ODEzMjk0NywiZXhwIjoxNDQ4MTQyOTQ3LCJuY2UiOiJ4NUpSMlNYTHZyZ0VrVjQxemtRUmN2SzYwVTFETTh4Nm02SHo4N2hQVU04aUYxZVo1QWpNV3Eta0ZiNzRwd0xoUHotTVRqWXhEbEVpazl3dEFDZlRNQSJ9.M61nHOa83wnCpFD14vqJPOU8TrglnsMb3M95R8KjSd2c0jHE9A9nNa_eahI0CvJ4SsvsMGxGwSyE94vFPNCxQTrmNb2jKnK4apQPQMs7_6jLArqps78kWI7IVFdXE-C8zRM3-jA3fJQiCCQeo9VFoD0SLrMFiiy3n23y3gZ4b04"
                }
            }    


+ Request Sign in a user with chat session token parameter true and nonce to get a `sessionToken` and `identityToken` (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "username": "fabia@gmail.com",
                "password":"1234",
                "grantType":"password",
                "nonce":"e7fzVtooU7U7Bx4HMliusVZVJj6VDkJaxrRi0yMN1mpcsmJCdDTtKUvBI02_0n_eahk9t9HIqLQ_ShLZ3IIBAQ",
                "chatSessionToken": true
            }

+ Response 200 (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "statusCode": 200,
                "user": {
                    "email": "fred@yalochat.com"
                },
                "type": "bearer",
                "token": "8fb3484d8b7f2dfaca53f653a605ec9cd9316723",
                "expiresIn": 3600,
                "chat": {
                    "sessionToken": "LPXXQXtj7eQpWw4GtSCsMYuTIf2pE6jLDGprScgor2z-VnrAkfJr577s0t4saaZM-z4f5Whq3S7tqAth4r_b5g.8-1",
                    "identityToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImN0eSI6ImxheWVyLWVpdDt2PTEiLCJraWQiOiJsYXllcjovLy9rZXlzL2ZhNjk3M2ZlLTY5NjUtMTFlNS1hODc3LWNlMjQwMjAwNTEyYSJ9.eyJpc3MiOiJsYXllcjovLy9wcm92aWRlcnMvYmVjODhmM2EtNjI2NS0xMWU1LWJjN2UtMGVkZmZlMDA3ODhmIiwicHJuIjoiZnJlZEBheWFsby5jbyIsImlhdCI6MTQ0ODEzMzA1NiwiZXhwIjoxNDQ4MTQzMDU2LCJuY2UiOiJCaUthenBFaWN4UmZ3WFY3Y3FkU1VEeG0ybmFZbG9ycnQ2am05ZXd4MWRndFJUOHI1T0VYeERpeGxpYnEzV215Q3I4dzVRN1hUTVplT0tkaENMWFo0ZyJ9.Ngf5CqUxcAY5L8tuBAdbMmQKQck3vJZp3xPD2oTP90CjcVDPR-4KeIDqCILHhGfz_lAbxC3kjZ237EMxSuWYrZzKe0Gzxg5M-C-kTPXYk6HfulYYE6UTCQgNYSDmqa6VHWQi4y6T5ipIUcAhorCdRJyy8CbAQiyAebkcaZxYYQc"
                }
            }

+ Request Sign in a user with chat session token parameter without a nonce (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "username": "fabia@gmail.com",
                "password":"1234",
                "grantType":"password",
                "chatSessionToken": true
            }

+ Response 200 (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "user": {
                    "email": "fabia@yalochat.comm"
                },
                "tokenType": "bearer",
                "accessToken": "c3d1973e5ca12eb80d5132283ebd850ede34ae17",
                "expiresIn": 3600,
                "refreshToken": "da0fc43d172ed901466dc783a75697e39bd7302f"
                "chat":{
                    "sessionToken":"0bbKLunec_070Ma8_hRHFRUVpz2Bsp9Yz94yRd4EUs50LPBPndjxs5YG5loikeCpUp5WUSYPenUgMO7vPFKqBw.8-4",
                    "identityToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImN0eSI6ImxheWVyLWVpdDt2PTEiLCJraWQiOiJsYXllcjovLy9rZXlzL2ZhNjk3M2ZlLTY5NjUtMTFlNS1hODc3LWNlMjQwMjAwNTEyYSJ9.eyJpc3MiOiJsYXllcjovLy9wcm92aWRlcnMvYmVjODhmM2EtNjI2NS0xMWU1LWJjN2UtMGVkZmZlMDA3ODhmIiwicHJuIjoiZnJlZEBheWFsby5jbyIsImlhdCI6MTQ0ODEzNDMzOCwiZXhwIjoxNDQ4MTQ0MzM4LCJuY2UiOiJ0OGdlVVRMQ1VURUxJemVwQlpTbnBxbjUzRVJwMnRvOTg1WHV6RGRuem9hcmNxbVQ3WHBTSUV0R3ZRaVExRy1vMUg3T0haTXFLZVhEV0xNdmpGeTVzQSJ9.Op_9K953ALli4YNliFqtukOCeajyCuhOaA3XIBqn2DGZx30z1xfwExkyS_pbaijBK48IxqV_YePkWi17MAaFlAmxYSgyKUOABUITN_bcFBVStd3gfUkjQbdxmeo45_rlS7MCUxTwnIZfE5hTgizvzCinOLhCMqHSaVr8ORJ9Yn0"
                }
            }

+ Request Singin with invalid password credentials (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "username": "fabia@gmail.com",
                "password":"invalidPassword",
                "grantType":"password",
                "chatSessionToken": true
            }

+ Response 401 (application/json)

    + Header

            WWW-Authenticate: Yalo Error type="user", code="invalidUserCredentials", error="User credentials are invalid"

    + Body

            {
                "statusCode": 401,
                "error": "Unauthorized",
                "message": "User credentials are invalid",
                "attributes": {
                    "type": "user",
                    "code": "invalidUserCredentials",
                    "error": "User credentials are invalid"
                }
            }

+ Request Sinup a new user (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "username": "fabia@gmail.com",
                "password":"1234",
                "grantType":"password"
            }

+ Response 201 (application/json)

    + Headers

            Authorization: Basic dG90bzplZHdhc2Fh

    + Body

            {
                "statusCode": 201,
                "user": {
                    "email": "fabia@yalochat.comm",
                },
                "tokenType": "bearer",
                "accessToken": "c3d1973e5ca12eb80d5132283ebd850ede34ae17",
                "expiresIn": 3600,
                "refreshToken": "da0fc43d172ed901466dc783a75697e39bd7302f"
            }


# Group Status

## Status endpoint [/status]
With this endpoint your are able to know if the service is up and the name and version of the service.

### Get Status [GET]

+ Response 200 (application/json)

        {
            name: "yapi",
            version: "1.0.0-beta.3"
        }


# Group Location

This service translate human addresses to geographic coordinates like latitude/longitude and vice versa. This helps to calculate the distance from a client to the stores nearby.

## Translate Geographic Coordinates [/{cc}/location?location={LatLonPair}]

This receives a geographic coordinate and try to return a human readable address.

+ Parameters
    
    <!-- Common parameters -->
    + cc (required, string) - ISO 2 characters country code 
    + location (required) - This is a geographic coordinate in the format "latitude,longitude", for example, location=19.454886,-99.1758911

### Get  [GET]

+ Response 200 (application/json)

        {
            address: "Mar MediterrÃ¡neo 220, Nextitla, 11420 Ciudad de MÃ©xico, D.F., Mexico"
        }

## Translate Human Address [/{cc}/location?address={address}]

Given a human readable address, returns a geographic coordinate.

+ Parameters
    
    <!-- Common parameters -->
    + cc (required, string) - ISO 2 characters country code 
    + address (required) - The street address that you want to translate, in the format used by the national postal service of the country concerned. Additional address elements such as business names and unit, suite or floor numbers should be avoided.

### Get [GET]

+ Response 200 (application/json)

        {
            lat: 19.4099711,
            lon: -99.1703208
        }

<!-- 
# Group Companies

All companies resources are located under the country code value path.
A company must have at least one store. To get the collection of stores by company you can use the `stores` resource filtering by company.

## Companies Collection [/{cc}/companies]
The companies collection allows to get information for over companies that have stores subscribed to Ayalo. If a GET request is performed over the root companies resource you should get a collection of all the registered companies on a specific country.

+ Parameters
    + cc (required, string) - ISO 2 characters country code

### Get available companies [GET]

+ Response 200 (application/json)

        [
            {
                "id":986,
                "slug":"best-buy",
                "name":"Best Buy",
                "links": {
                    "self": "http://api.yalochat.com/v1/mx/companies/best-buy"
                },
                "title":"Best Buy - Mexico",
                "logo": {
                  "small": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/best-buy-small.png",
                  "medium": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/best-buy-medium.png",
                  "large": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/best-buy-large.png"
                },
                "description": "CompaÃ±Ã­a que ofrece productos electronicos",
                "phone":"5374-0108",
                "active": true,
                "sell_online": true,
                "url": "httpd://www.bestbuy.mx/",
                "chat_rating": 4.4,
                "tags": [
                    "cargador-apple",
                    "video-juegos",
                    "televisores"
                ],
                "country": {
                    "code":"mx",
                    "name":"Mexico",
                    "url": "http:/api.yalochat.com/v1/countries/mx"
                },
                "stores": "http:/api.yalochat.com/v1/mx/stores?q=company:best-buy"
            },
            {
                "id":786,
                "slug":"walmart",
                "name":"Walmart",
                "links": {
                    "self": "http://api.yalochat.com/v1/mx/companies/walmart",
                    "stores": "http:/api.yalochat.com/v1/mx/stores?q=company:walmart"
                },
                "title":"Walmart - Mexico",
                "logo": {
                  "small": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/walmart-small.png",
                  "medium": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/walmart-medium.png",
                  "large": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/walmart-large.png"
                },
                "description": "Biggest retail corporation in the world.",
                "phone":"9875-4567",
                "active": true,
                "sell_online": false,
                "url": "http://www.walmart.mx",
                "chat_rating": 4.3,
                "tags": [
                    "alimento",
                    "articulo-limpieza",
                    "refrezco"
                ],
                "country": {
                    "code":"mx",
                    "name":"Mexico",
                    "links": {
                        "self": "http:/api.yalochat.com/v1/countries/mx"
                    }
                }
            }
        ]

## Company [/{cc}/companies/{company_slug}]
Retrieve a company data

+ Parameters
    + cc (required, string) - ISO 2 characters country code
    + company_slug (required) - A company slug

### Get company [GET]

+ Response 200 (application/json)

        {
            "id":986,
            "slug":"best-buy",
            "name":"Best Buy",
            "self":"http://api.yalochat.com/v1/mx/companies/best-buy",
            "title":"Best Buy - Mexico",
            "logo": {
              "small": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/best-buy-small.png",
              "medium": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/best-buy-medium.png",
              "large": "https://s3.amazonaws.com/assets.yalochat.com/mx/logos/best-buy-large.png"
            },
            "description": "CompaÃ±Ã­a que ofrece productos electronicos",
            "phone":"5374-0108",
            "active": true,
            "sell_online": true,
            "url": "httpd://www.bestbuy.mx/",
            "chat_rating": 4.4,
            "tags": [
                "cargador-apple",
                "video-juegos",
                "televisores"
            ],
            "country": {
                "code":"mx",
                "name":"Mexico",
                "links": {
                    "self": "http:/api.yalochat.com/v1/countries/mx"
                }
            },
            "stores": "http:/api.yalochat.com/v1/mx/stores?q=company:best-buy"
        } -->

<!-- 
# yAPI Query collection

# Group Root resource operations
All root resource, except the status resource, are specified after the country `{cc}` path parameter. A root resource is a business object that can be filter, query and refined.

## Filtering resources
Filters on root resources can be executed purely using URI nested path parameters. For example, in the store resource path param filters helps refine the store physical location.

_Filter examples_
* Filters on `stores`
  - `/{cc}/stores/{region}` _Filter stores by  region_
  - `/{cc}/stores/{region}/{city}` _Filter stores by region and city_
  - `/{cc}/stores/{slug}` _Get a specific store document_

## Searching resources
yApi search allows to execute a search and get back hits that match a string. A search can be performed using a simple search string parameter `q`.

_Search examples_
* Searching over resources
  - `/mx/products?q=motos` _Search for products with th string "motos" on any field._
  - `/gt/companies?q=zona+9` _Search all the companies with the string "zona 9" on any field._

## Querying resources
A query request can be executed using the `q` request parameter in conjuction with a field. Queries are provided with a rich query language through the [Apache Lucene Query Parser](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html).

### Fields
yAPI supports fielded data. When performing a query you can either specify a field or not.

You can search any field by typing the field name followed by a colon ":" and then the term you are looking for.

As an example, assume you want to search in the store name field. If you want to answer the question, which store is named "Best Buy", you can query:

* `/mx/stores/df?q=name:"Best Buy"` Search for stores in `df` region that contains "Best Buy" in field name.
* `/gt/stores?q=name:best` Search for stores that contains the string "best" in field name.

### Term modifiers

#### Terms
* A query is broken up into terms and operators. There are two types of terms: __Single Terms and Phrases.__
* A Single Term is a single word such as "motos" or "electronicos".
* A Phrase is a group of words surrounded by double quotes such as "foto video".
* Multiple terms can be combined together with Boolean operators to form a more complex query.

#### Wildcards
yAPI supports modifying query terms to provide a wide range of searching options.
A wildcard search or query supports single and multiple character wildcard searches within single terms _(not within phrase queries)_.

* To perform a single character wildcard search use the "?" symbol.
* To perform a multiple character wildcard search use the "*" symbol.

The single character wildcard looks for terms that match with the single character replaced. For example, to search for "camion" or "camiÃ³n" you can use the search:

* `/mx/products?q=cami?n`

Multiple character wildcard looks for 0 or more matches. For example, to search for "electronicos" or "electrodomesticos", you can use the search:

* `/mx/products?q=electro*`

You can also use the wildcard in the middle of a term.

* `/mx/stores/df/satelite?q=sal?n`

Note wildcards can be slow, as it needs to iterate over many terms.
To prevent extremely slow wildcard queries, a wildcard term should not start with one of the wildcards * or ?.

### Fuzzy
yAPI supports fuzzy searches or queries. To do a fuzzy search use the tilde, "~", symbol at the end of a Single word Term.
For example to search for a term similar in spelling to "plaza" use the fuzzy search:

* `/mx/stores/df?q=plaza~`

### Boolean Operators
Boolean operators allow terms to be combined through logic operators. yAPI supports AND, "+", OR, NOT and "-" as Boolean operators __(Note: Boolean operators must be ALL CAPS)__.
The OR operator is the default conjunction operator. This means that if there is no Boolean operator between two terms, the OR operator is used.
The OR operator links two terms and finds a matching document if either of the terms exist in a document.
The symbol || can be used in place of the word OR.

#### OR
To search for places that contain either "Segusino muebles" or just "muebles" you can use any of these queries:
* `/mx/products?q="Segusino muebles" muebles`
* `/mx/products?q="Segusino muebles" OR muebles`
* `/mx/products?q="Segusino muebles" || muebles`

#### AND
The AND operator matches resources where both terms exist anywhere in the text of a resource.
To search for documents that contain "muebles" and "electrodomesticos" use the query:

* `/mx/products?q=muebles AND electrodomesticos` _Search for products with the word "muebles" and "electrodomesticos"._

#### Required
The "+" or required operator requires that the term after the "+" symbol exist somewhere in a the field.
To search for products that must contain "iphone" and may contain "telefono" use the query:

* `/mx/products?q=+iphone telefonos`

#### NOT

The NOT operator excludes resources that contain the term after NOT. The symbol ! can be used in place of the word NOT.
To search for products that contain "sony" but not "telefono" use the search:

* `/gt/products?q=sony !telefono`
* `/gt/products?q=sony NOT telefono`

__Note:__ The NOT operator cannot be used with just one term. For example, the following search will return no results:

* `/gt/products?q=sony NOT "telefono celular"`

#### Prohibit

The "-" or prohibit operator excludes resources that contain the term after the "-" symbol.
To search for documents that contain "sony" but not "telefono celular" use the query:

* `/gt/products?q=sony -"telefono celular"`

### Grouping
yAPI supports using parentheses to group clauses to form sub queries. This can be very useful if you want to control the boolean logic for a query.

_Example_

* `/gt/products/electronicos?q=(name:telefono OR name:celular) AND (description:huawei OR name:samsung)` _Search for products in electronicos that the field name contains "telefono" or "celular" and the field description contains "huawei" or "samsung"_
* `/gt/products?q=name:(+samsung +"galaxy note")` _Search for products with name that contains "samsing" or "galaxy note"._

## Selective fields
Allows to selectively load specific fields for each resource returned from a request. For select fields you need to add the `fields` query param to your request.

_Example_

* `/gt/products?q=sony&fiels=name,description` _Get the name and description fields for all products with the word "sony"_

* can be used to load all stored fields from nested resource attribute.

* `/gt/products?q=sony&fiels=name,description,category.*` _Get the name, description and all category fields for all products with the word "sony"_
* `/gt/stores/df/satelite?fiels=slug,name,description,company.name,company.description` _Get the name, description and all category fields for all products with the word "sony"_ -->


# Group Categories
All categories resources are located under the country code value path.

## Categories Collection [/{cc}/categories]
The categories collection allows to get all the available categories in a given country. Stores are grouped by categories.

+ Parameters
    
    <!-- Common parameters -->
    + cc (required, string) - ISO 2 characters country code 
    + location (optional) - This is a geographic coordinate in the format "latitude,longitude", works like a filter to show only the categories that have stores near the given geographic coordinate.

### Get Categories [GET]

+ Response 200 (application/hal+json)

        {
            "total": 2,
            "_links": {
                "self": {"href":"http://api.yalochat.com/mx/categories?location=19.414980271831,-99.177446197718"}
            },
            "_embedded": {
                "categories": [
                    {
                        "id": "restaurantes" ,
                        "name": "Restaurantes",
                        images: {
                            logo: "https://storage.googleapis.com/yalo-img/categories/logo_restaurantes.png",
                            icon: "https://storage.googleapis.com/yalo-img/categories/icon_restaurantes.png",
                            pin: "https://storage.googleapis.com/yalo-img/categories/pin_restaurantes.png",
                            photo: "https://storage.googleapis.com/yalo-img/categories/cat_restaurantes.jpg"
                        },
                        _links: {
                            self: {
                                href: "http://api.yalochat.com/mx/categories/restaurantes?location=19.414980271831,-99.177446197718"
                            },
                            stores: {
                                href: "http://api.yalochat.com/mx/stores?location=19.414980271831,-99.177446197718&category=restaurantes"
                            }
                        },
                        "_embedded": {
                            "stores": {
                                "total": 121
                            }
                        }
                    },{
                        id: "cafes",
                        name: "Cafes",
                        images: {
                            logo: "https://storage.googleapis.com/yalo-img/categories/logo_bebidas.png",
                            icon: "https://storage.googleapis.com/yalo-img/categories/icon_cafes.png",
                            pin: "https://storage.googleapis.com/yalo-img/categories/pin_cafes.png",
                            photo: "https://storage.googleapis.com/yalo-img/categories/cat_cafes.jpg"
                        },
                        _links: {
                            self: {
                                href: "http://api.yalochat.com/mx/categories/cafes?location=19.414980271831,-99.177446197718"
                            },
                            stores: {
                                href: "http://api.yalochat.com/mx/stores?location=19.414980271831,-99.177446197718&category=cafes"
                            }
                        },
                        _embedded: {
                            stores: {
                                total: 33
                            }
                        }
                    }
                ]
            }
        }


# Group Stores
All stores resources are located under the country code value path.

## Stores Collection [/{cc}/stores{?location,category}]
The stores collection allow to get information for over physical stores subscribed to Yalo. If a GET request is performed over the root stores resource you should get a collection of all the registered stores on a specific country.

+ Parameters
    
    <!-- Common parameters -->
    + cc (required, string) - ISO 2 characters country code 
    + location (optional) - This is a geographic coordinate in the format "latitude,longitude", works like a filter to show only the stores that are near the given geographic coordinate.
    + category (optional) - This has to be a valid category ID, it returns stores of the given category.

### Get Stores [GET]

+ Response 200 (application/hal+json)

        {
            total: 113,
            _links: {
                self: {
                    href: "http://api.yalochat.com/mx/stores?location=19.423344,-99.132821"
                }
            },
            _embedded: {
                stores: [
                    {
                        name: "Cocina Economica Los Antojitos",
                        title: "Cocina Economica Los Antojitos - DF - IZTAPALAPA",
                        description: "",
                        url: "",
                        logo: "",
                        photos: {
                            listing: {
                                big: "",
                                small: ""
                            },
                            profile: {
                                big: "",
                                small: ""
                            }
                        },
                        location: {
                            lat: 19.42374,
                            lon: -99.132721,
                            distance: 45.47
                        },
                        address: {
                            formatted: "FRAY SERVANDO TERESA DE MIER 142 B2",
                            region: {
                                name: "Distrito Federal",
                                id: "distrito-federal",
                                slug: "distrito-federal"
                            },
                            city: {
                                name: "IZTAPALAPA",
                                id: "distrito-federal_iztapalapa",
                                slug: "iztapalapa"
                            },
                            country: {
                                name: "MÃ©xico",
                                id: "mx"
                            },
                            postalCode: "09890",
                            zone: {
                                id: "distrito-federal_iztapalapa_benito-juarez",
                                slug: "benito-juarez",
                                name: "BENITO JUAREZ"
                            }
                        },
                        verified: false,
                        financing: "",
                        rating: 0,
                        chatRating: 0,
                        amenities: [
                        "Comida Para Llevar",
                        "Promociones",
                        "Entrega A Domicilio",
                        "Desayunos",
                        "Servicio De Banquetes",
                        "Facilidades Para Personas Discapacitadas"
                        ],
                        schedule: [
                            {
                                days: [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7
                                ],
                                hours: [
                                    [
                                        "0800",
                                        "1800"
                                    ]
                                ]
                            }
                        ],
                        tags: [
                            ""
                        ],
                        timezone: "America/Mexico_City",
                        operators: [
                            "service@yalochat.com",
                            "cocina-economica-los-antojitos.mx"
                        ],
                        id: "cocina-economica-los-antojitos",
                        isOpen: true,
                        _links: {
                            self: {
                                href: "http://api.yalochat.com/mx/stores/cocina-economica-los-antojitos?location=19.423344,-99.132821"
                            }
                        },
                        _embedded: {
                            categories: [
                                {
                                    id: "restaurantes",
                                    name: "Restaurantes",
                                    images: {
                                        logo: "https://storage.googleapis.com/yalo-img/categories/logo_restaurantes.png",
                                        icon: "https://storage.googleapis.com/yalo-img/categories/icon_restaurantes.png",
                                        pin: "https://storage.googleapis.com/yalo-img/categories/pin_restaurantes.png",
                                        photo: "https://storage.googleapis.com/yalo-img/categories/cat_restaurantes.jpg"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        name: "Pizzas Betos",
                        title: "Pizzas Betos - DF - MEXICO",
                        description: "",
                        url: "",
                        logo: "http://graficos.menumania.com.mx/contentstore/43/1941043_V1-E57754018.jpg",
                        photos: {
                            listing: {
                                big: "",
                                small: ""
                            },
                            profile: {
                                big: "",
                                small: ""
                            }
                        },
                        location: {
                            lat: 19.424622,
                            lon: -99.131605,
                            distance: 196.38
                        },
                        address: {
                            formatted: "MIGUEL SCHULTZ 20 - B",
                            region: {
                                name: "Distrito Federal",
                                id: "distrito-federal",
                                slug: "distrito-federal"
                            },
                            city: {
                                name: "MEXICO",
                                id: "distrito-federal_mexico",
                                slug: "mexico"
                            },
                            country: {
                                name: "MÃ©xico",
                                id: "mx"
                            },
                            postalCode: "06470",
                            zone: {
                                id: "distrito-federal_mexico_san-rafael",
                                slug: "san-rafael",
                                name: "SAN RAFAEL"
                            }
                        },
                        verified: false,
                        financing: "",
                        rating: 0,
                        chatRating: 0,
                        amenities: [
                            ""
                        ],
                        schedule: [
                            {
                                days: [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7
                                ],
                                hours: [
                                    [
                                        "0100",
                                        "2200"
                                    ]
                                ]
                            }
                        ],
                        tags: [
                            ""
                        ],
                        timezone: "America/Mexico_City",
                        operators: [
                            "service@yalochat.com",
                            "pizzas-betos.mx"
                        ],
                        id: "pizzas-betos",
                        isOpen: true,
                        _links: {
                            self: {
                                href: "http://api.yalochat.com/mx/stores/pizzas-betos?location=19.423344,-99.132821"
                            }
                        },
                        _embedded: {
                            categories: [
                                {
                                    id: "restaurantes",
                                    name: "Restaurantes",
                                    images: {
                                        logo: "https://storage.googleapis.com/yalo-img/categories/logo_restaurantes.png",
                                        icon: "https://storage.googleapis.com/yalo-img/categories/icon_restaurantes.png",
                                        pin: "https://storage.googleapis.com/yalo-img/categories/pin_restaurantes.png",
                                        photo: "https://storage.googleapis.com/yalo-img/categories/cat_restaurantes.jpg"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }

## Store [/{cc}/stores/{storeId}{?location}]
Given a valid store ID, this endpoint returns a json formatted response containing the store data.

+ Parameters
    :(cc parameter)[parameters.md countryCode:]
    + storeId: `best-buy-df-satelite` (required, string) - The store id is an unique store identifier
    + location (optional) - This is a geographic coordinate in the format "latitude,longitude", if specified, the distance between the client(the given geographic coordinate) and the store is included in the response.

### Get Store [GET]

+ Response 200 (application/hal+json)

        {
            name: "Pizza del Perro Negro",
            title: "Pizza del Perro Negro",
            description: "La Mejor Pizza, punto.",
            url: "http://www.pizzadelperronegro.com/",
            phone: "52 55 5533 9240",
            logo: "",
            photos: {
                listing: {
                    big: "https://irs2.4sqi.net/img/general/width960/36663692_91y9Q_lf_ng0rlSvKkZlch50txiOgxF6szpZFnGfuMY.jpg",
                    small: "https://irs2.4sqi.net/img/general/width960/36663692_91y9Q_lf_ng0rlSvKkZlch50txiOgxF6szpZFnGfuMY.jpg"
                },
                profile: {
                    big: "https://irs2.4sqi.net/img/general/width960/36663692_91y9Q_lf_ng0rlSvKkZlch50txiOgxF6szpZFnGfuMY.jpg",
                    small: "https://irs2.4sqi.net/img/general/width960/36663692_91y9Q_lf_ng0rlSvKkZlch50txiOgxF6szpZFnGfuMY.jpg"
                }
            },
            location: {
                lat: 19.416557,
                lon: -99.169667,
                distance: 3937
            },
            address: {
                formatted: "Parque EspaÃ±a 3, Roma Norte, 06700 Ciudad de MÃ©xico, Distrito Federal, MÃ©xico",
                region: {
                    id: "distrito-federal",
                    name: "Distrito Federal",
                    slug: "distrito-federal"
                },
                city: {
                    id: "distrito-federal_ciudad-de-mexico",
                    name: "Ciudad de MÃ©xico",
                    slug: "ciudad-de-mexico"
                },
                country: {
                    id: "mx",
                    name: "MÃ©xico"
                },
                postalCode: "06700",
                zone: {
                    id: "distrito-federal_ciudad-de-mexico_roma-norte",
                    name: "Roma Norte",
                    slug: "roma-norte"
                },
                verified: true
            },
            verified: false,
            financing: "",
            rating: 0,
            chatRating: 0,
            amenities: [ ],
            schedule: [
                {
                    days: [
                        1,
                        2,
                        3,
                        7
                    ],
                    hours: [
                        [
                            "1200",
                            "0000"
                        ]
                    ]
                },
                {
                    days: [
                        4,
                        5,
                        6
                    ],
                    hours: [
                        [
                            "1200",
                            "0100"
                        ]
                    ]
                }
            ],
            tags: [
                "Pizza",
                "Cerveza"
            ],
            timezone: "America/Mexico_City",
            operators: [
                "service@yalochat.com",
                "pizza-del-perro-negro.mx"
            ],
            id: "pizza-del-perro-negro",
            _links: {
                self: {
                    href: "http://api.yalochat.com/mx/stores/pizza-del-perro-negro?location=19.423344,-99.132821"
                }
            },
            isOpen: true,
            _embedded: {
                categories: [
                    {
                        id: "restaurantes",
                        name: "Restaurantes",
                        images: {
                            logo: "https://storage.googleapis.com/yalo-img/categories/logo_restaurantes.png",
                            icon: "https://storage.googleapis.com/yalo-img/categories/icon_restaurantes.png",
                            pin: "https://storage.googleapis.com/yalo-img/categories/pin_restaurantes.png",
                            photo: "https://storage.googleapis.com/yalo-img/categories/cat_restaurantes.jpg"
                        }
                    }
                ]
            }
        }

## Is Store Open? [/{cc}/stores/{storeId}/is-open]
Given a valid store ID, this endpoint indicates if a store is open in the moment when the request is made.

+ Parameters
    :(cc parameter)[parameters.md countryCode:]
    + storeId: `best-buy-df-satelite` (required, string) - The store id is an unique store identifier

### Is Open [GET]

+ Response 200 (application/hal+json)

        {
            id: "pizza-del-perro-negro",
            isOpen: true,
            _links: {
                self: {
                    href: "http://api.yalochat.com/mx/stores/pizza-del-perro-negro"
                }
            }
        }


# Group Search

You can perform a basic search using the "q" query string parameter. The value of the "q" parameter is parsed into *terms* and *operators*.

> The *"q"* parameter is only available in the **stores** and **categories** resources.

A *term* can be a single word, or a phrase surrounded by double quotes -- "guatemalan good" -- which searches for all the words in the phrase, in the same order.

With the *operators* you can customize your search. The available operators are the following.

### Field Names

It is possible to specify fields, like this:

- where the status field contains "active"

    ```
    status:active
    ```
- where the title field contains quick or brown. If you omit the OR operator the default operator will be used

    ```
    title:(quick OR brown)
    ```
- where the author field contains the exact phrase "john smith"

    ```
    author:"John Smith"
    ```
- where the field title has no value (or is missing):

    ```
    _missing_:title
    ```
- where the field title has any non-null value:

    ```
    _exists_:title
    ```

### Ranges
Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max}.

- All days in 2012:

    ```
    date:[2012-01-01 TO 2012-12-31]
    ```
- Numbers 1..5

    ```
    count:[1 TO 5]
    ```
- Tags between alpha and omega, excluding alpha and omega:

    ```
    tag:{alpha TO omega}
    ```
- Numbers from 10 upwards

    ```
    count:[10 TO *]
    ```
- Dates before 2012

    ```
    date:{* TO 2012-01-01}
    ```
- Curly and square brackets can be combined:

    ```
    count:[1 TO 5}
    ```

### Boolean operators
By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz. There are boolean operators which can be used in the query string itself to provide more control.

The preferred operators are **+** (this term must be present) and **-** (this term must not be present). All other terms are optional. For example, this query:

```
quick brown +fox -news
```

states that:

- fox must be present
- news must not be present

The familiar operators **AND**, **OR** and **NOT** (also written &&, || and !) are also supported. However, the effects of these operators can be more complicated than is obvious at first glance. **NOT** takes precedence over **AND**, which takes precedence over **OR**. While the + and - only affect the term to the right of the operator, **AND** and **OR** can affect the terms to the left and right.

### Grouping
Multiple terms or clauses can be grouped together with parentheses, to form sub-queries:

```
(quick OR brown) AND fox
```

Groups can be used to target a particular field, or to boost the result of a sub-query:

```
status:(active OR pending) title:(full text search)
```

### Reserved characters
If you need to use any of the characters which function as operators in your query itself (and not as operators), then you should escape them with a leading backslash. For instance, to search for (1+1)=2, you would need to write your query as \(1\+1\)\=2.

The reserved characters are: + - = && || > < ! ( ) { } [ ] ^ " ~ * ? : \ /

> Failing to escape these special characters correctly could lead to a syntax error which prevents your query from running.

<!-- 
# Group Places

Recources related to coutries, cities and zones.

## List Countries [/countries]

Coutries collection.

### Retrieve all countries [GET]

Retrieves a list of all available countries.

+ Response 200 (application/json)

        [
            {
                "code": "gt",
                "name": "Guatemala",
                "cities": "123"
            },
            {
                "code": "mx",
                "name": "Mexico",
                "cities": "456"
            }
        ]

## Get Country [/countries/{cc}]

Retrieve country data.

+ parameters
    + cc - ISO 2 characters country code

### Get country data [GET]

Get data about a coutry.

+ Response 200 (application/json)

        {
            "code": "gt",
            "self": "http:/api.yalochat.com/countries/gt"
            "name": "Guatemala",
            "cities": "123"
        }

## List Cities [/countries/{cc}/cities]

City collections.

+ parameters
    + cc - ISO 2 characters country code

### Retrieve cities by country [GET]

+ Response 200 (application/json)

        [
            {
                "id": "1",
                "name": "Guatemala city",
                "location": "14.583559, -90.527511",
                "zones": [
                    {
                        "name": "Zona 1",
                        "location": "14.583559, -90.527511"
                    },
                    {
                        "name": "Zona 2",
                        "location": "14.59, -90.6042"
                    }
                ]
            },
            {
                "id": "2",
                "name": "Mixco",
                "location": "14.634350, -90.600236",
                "zones": [
                    {
                        "name": "Zona 1",
                        "location": "14.583559, -90.527511"
                    },
                    {
                        "name": "Zona 2",
                        "location": "14.59, -90.6042"
                    }
                ]
            }
        ]

## Get City [/countries/{cc}/cities/{city_id}]

Retrieve city data.

+ parameters
    + cc - ISO 2 characters country code
    + city_id - City id

### Get city [GET]

+ Response 200 (application/json)

        {
            "id": "1",
            "name": "Guateamala city",
            "location": "14.583559, -90.527511",
            "zones": [
                {
                    "name": "Zona 1",
                    "location": "14.583559, -90.527511"
                },
                {
                    "name": "Zona 2",
                    "location": "14.59, -90.6042"
                }
            ]
        } -->

<!-- 
## Group Products resource WIP
Request operation for yAPI avaliable products. -->
